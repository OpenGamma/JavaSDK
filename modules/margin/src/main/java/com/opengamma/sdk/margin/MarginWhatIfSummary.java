/*
 * Copyright (C) 2017 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */
package com.opengamma.sdk.margin;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.impl.direct.DirectPrivateBeanBuilder;

/**
 * The summary of the calculated margin of the what-if scenario.
 */
@BeanDefinition(builderScope = "private", metaScope = "private", factoryName = "of")
public final class MarginWhatIfSummary implements ImmutableBean {

  /**
   * The margin of the base portfolio, in the reporting currency.
   */
  @PropertyDefinition
  private final double baseMargin;

  /**
   * The margin of the base portfolio + added trades, in the reporting currency.
   */
  @PropertyDefinition
  private final double totalMargin;

  /**
   * The difference between total margin and the base margin, in the reporting currency.
   */
  @PropertyDefinition
  private final double marginDifference;

  /**
   * The breakdown of the initial margin.
   */
  @PropertyDefinition(validate = "notNull")
  private final List<NamedValue> marginDetails;

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code MarginWhatIfSummary}.
   * @return the meta-bean, not null
   */
  public static MetaBean meta() {
    return MarginWhatIfSummary.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(MarginWhatIfSummary.Meta.INSTANCE);
  }

  /**
   * Obtains an instance.
   * @param baseMargin  the value of the property
   * @param totalMargin  the value of the property
   * @param marginDifference  the value of the property
   * @param marginDetails  the value of the property, not null
   * @return the instance
   */
  public static MarginWhatIfSummary of(
      double baseMargin,
      double totalMargin,
      double marginDifference,
      List<NamedValue> marginDetails) {
    return new MarginWhatIfSummary(
      baseMargin,
      totalMargin,
      marginDifference,
      marginDetails);
  }

  private MarginWhatIfSummary(
      double baseMargin,
      double totalMargin,
      double marginDifference,
      List<NamedValue> marginDetails) {
    JodaBeanUtils.notNull(marginDetails, "marginDetails");
    this.baseMargin = baseMargin;
    this.totalMargin = totalMargin;
    this.marginDifference = marginDifference;
    this.marginDetails = Collections.unmodifiableList(new ArrayList<>(marginDetails));
  }

  @Override
  public MetaBean metaBean() {
    return MarginWhatIfSummary.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the margin of the base portfolio, in the reporting currency.
   * @return the value of the property
   */
  public double getBaseMargin() {
    return baseMargin;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the margin of the base portfolio + added trades, in the reporting currency.
   * @return the value of the property
   */
  public double getTotalMargin() {
    return totalMargin;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the difference between total margin and the base margin, in the reporting currency.
   * @return the value of the property
   */
  public double getMarginDifference() {
    return marginDifference;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the breakdown of the initial margin.
   * @return the value of the property, not null
   */
  public List<NamedValue> getMarginDetails() {
    return marginDetails;
  }

  //-----------------------------------------------------------------------
  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      MarginWhatIfSummary other = (MarginWhatIfSummary) obj;
      return JodaBeanUtils.equal(baseMargin, other.baseMargin) &&
          JodaBeanUtils.equal(totalMargin, other.totalMargin) &&
          JodaBeanUtils.equal(marginDifference, other.marginDifference) &&
          JodaBeanUtils.equal(marginDetails, other.marginDetails);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(baseMargin);
    hash = hash * 31 + JodaBeanUtils.hashCode(totalMargin);
    hash = hash * 31 + JodaBeanUtils.hashCode(marginDifference);
    hash = hash * 31 + JodaBeanUtils.hashCode(marginDetails);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(160);
    buf.append("MarginWhatIfSummary{");
    buf.append("baseMargin").append('=').append(baseMargin).append(',').append(' ');
    buf.append("totalMargin").append('=').append(totalMargin).append(',').append(' ');
    buf.append("marginDifference").append('=').append(marginDifference).append(',').append(' ');
    buf.append("marginDetails").append('=').append(JodaBeanUtils.toString(marginDetails));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code MarginWhatIfSummary}.
   */
  private static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code baseMargin} property.
     */
    private final MetaProperty<Double> baseMargin = DirectMetaProperty.ofImmutable(
        this, "baseMargin", MarginWhatIfSummary.class, Double.TYPE);
    /**
     * The meta-property for the {@code totalMargin} property.
     */
    private final MetaProperty<Double> totalMargin = DirectMetaProperty.ofImmutable(
        this, "totalMargin", MarginWhatIfSummary.class, Double.TYPE);
    /**
     * The meta-property for the {@code marginDifference} property.
     */
    private final MetaProperty<Double> marginDifference = DirectMetaProperty.ofImmutable(
        this, "marginDifference", MarginWhatIfSummary.class, Double.TYPE);
    /**
     * The meta-property for the {@code marginDetails} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<List<NamedValue>> marginDetails = DirectMetaProperty.ofImmutable(
        this, "marginDetails", MarginWhatIfSummary.class, (Class) List.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "baseMargin",
        "totalMargin",
        "marginDifference",
        "marginDetails");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1007069217:  // baseMargin
          return baseMargin;
        case -924857838:  // totalMargin
          return totalMargin;
        case -1565370997:  // marginDifference
          return marginDifference;
        case 1113711796:  // marginDetails
          return marginDetails;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends MarginWhatIfSummary> builder() {
      return new MarginWhatIfSummary.Builder();
    }

    @Override
    public Class<? extends MarginWhatIfSummary> beanType() {
      return MarginWhatIfSummary.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case -1007069217:  // baseMargin
          return ((MarginWhatIfSummary) bean).getBaseMargin();
        case -924857838:  // totalMargin
          return ((MarginWhatIfSummary) bean).getTotalMargin();
        case -1565370997:  // marginDifference
          return ((MarginWhatIfSummary) bean).getMarginDifference();
        case 1113711796:  // marginDetails
          return ((MarginWhatIfSummary) bean).getMarginDetails();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code MarginWhatIfSummary}.
   */
  private static final class Builder extends DirectPrivateBeanBuilder<MarginWhatIfSummary> {

    private double baseMargin;
    private double totalMargin;
    private double marginDifference;
    private List<NamedValue> marginDetails = Collections.emptyList();

    /**
     * Restricted constructor.
     */
    private Builder() {
      super(meta());
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case -1007069217:  // baseMargin
          return baseMargin;
        case -924857838:  // totalMargin
          return totalMargin;
        case -1565370997:  // marginDifference
          return marginDifference;
        case 1113711796:  // marginDetails
          return marginDetails;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case -1007069217:  // baseMargin
          this.baseMargin = (Double) newValue;
          break;
        case -924857838:  // totalMargin
          this.totalMargin = (Double) newValue;
          break;
        case -1565370997:  // marginDifference
          this.marginDifference = (Double) newValue;
          break;
        case 1113711796:  // marginDetails
          this.marginDetails = (List<NamedValue>) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public MarginWhatIfSummary build() {
      return new MarginWhatIfSummary(
          baseMargin,
          totalMargin,
          marginDifference,
          marginDetails);
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(160);
      buf.append("MarginWhatIfSummary.Builder{");
      buf.append("baseMargin").append('=').append(JodaBeanUtils.toString(baseMargin)).append(',').append(' ');
      buf.append("totalMargin").append('=').append(JodaBeanUtils.toString(totalMargin)).append(',').append(' ');
      buf.append("marginDifference").append('=').append(JodaBeanUtils.toString(marginDifference)).append(',').append(' ');
      buf.append("marginDetails").append('=').append(JodaBeanUtils.toString(marginDetails));
      buf.append('}');
      return buf.toString();
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}

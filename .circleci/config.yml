version: 2.1

#############################################################################
# execution environment
executors:

#----------------------------------------------------------------------------
# vital to set the MaxRAM parameter as cgroups settings are not passed to the JVM
  jdk11:
    docker:
      - image: circleci/openjdk:11.0.2-jdk
    working_directory: ~/repo
    environment:
      JAVA_TOOL_OPTIONS: -XX:MaxRAM=1536m
      MAVEN_OPTS: -Xmx512m


#############################################################################
# reusable commands
commands:

#----------------------------------------------------------------------------
# all uses of mvn will be passed these command line arguments
  init_maven:
    description: "Initializing Maven"
    steps:
      - run:
          name: Initializing Maven
          command: |
            mvn --version
            mkdir -p ./.mvn
            echo '-e -B -DtrimStackTrace=false --settings .circleci/maven-settings.xml' > ./.mvn/maven.config

#----------------------------------------------------------------------------
  maven_install_test:
    description: "Maven install and test"
    steps:
      - run:
          name: Maven install
          command: mvn install -Dstrict -DintegrationTest -Ddist

#----------------------------------------------------------------------------
# run in the modules subdirectory to avoid deploying examples and root
  maven_deploy:
    description: "Maven deploy"
    steps:
      - run:
          name: Maven deploy
          command: mvn deploy -Ddist -Doss.repo -pl :sdk-parent,:sdk-common,:sdk-margin

#----------------------------------------------------------------------------
  maven_release:
    description: "Maven release"
    steps:
      - run:
          name: Triggering release of new version
          command: |
            RELEASE_SHA=$(git rev-parse HEAD)
            git checkout master
            MASTER_SHA=$(git rev-parse HEAD)
            if [[ "$RELEASE_SHA" != "$MASTER_SHA" ]]; then
              echo "release tag SHA != master HEAD SHA, $RELEASE_SHA $MASTER_SHA"
              exit 1
            fi
            git config --local user.email "cibot@opengamma.com"
            git config --local user.name "opengammacibot"
            mvn release:prepare release:clean
      - run:
          name: Deleting release tag
          command: |
            git tag --delete $CIRCLE_TAG
            git push --delete origin $CIRCLE_TAG
          when: always

#----------------------------------------------------------------------------
# always read the latest cache that was stored
  restore_maven_cache:
    description: "Restoring Maven cache"
    steps:
      - restore_cache:
          name: "Restoring Maven cache"
          keys:
            - mvn-repo-v1-
      - run:
          name: Maven take dependencies local
          command: mvn de.qaware.maven:go-offline-maven-plugin:1.1.0:resolve-dependencies

#----------------------------------------------------------------------------
# always store a cache
  store_maven_cache:
    description: "Storing Maven cache"
    steps:
      - save_cache:
          name: "Storing Maven cache"
          key: mvn-repo-v1-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/.m2/repository

#----------------------------------------------------------------------------
  perform_build:
    description: "Performs the standard build"
    parameters:
      actions:
        type: steps
    steps:
      - checkout
      - init_maven
      - restore_maven_cache
      - steps: << parameters.actions >>
      - store_maven_cache

#----------------------------------------------------------------------------
# this works with gpg v2.1 as currently installed on CircleCI
  setup_gpg:
    description: "Setup GPG"
    steps:
      - run:
          name: Setup GPG
          working_directory: ~/repo/.circleci
          command: |
            echo $SIGNING_PASSWORD | gpg --batch --passphrase-fd 0 -o codesigning.asc -d codesigning.asc.gpg
            gpg --batch --import codesigning.asc
            shred --remove codesigning.asc


#############################################################################
# jobs to run
jobs:
  build:
    executor: jdk11
    steps:
      - perform_build:
          actions:
            - maven_install_test

#----------------------------------------------------------------------------
  release:
    executor: jdk11
    steps:
      - perform_build:
          actions:
            - maven_install_test
            - setup_gpg
            - maven_deploy

#----------------------------------------------------------------------------
  trigger_release:
    executor: jdk11
    steps:
      - perform_build:
          actions:
            - maven_release


#############################################################################
# workflow elements
workflows:

#----------------------------------------------------------------------------
# main build, runs for branches
  build:
    jobs:
      - build:
          context: OG-OSS

#----------------------------------------------------------------------------
# release based on a tag
  release:
    jobs:
      - release:
          context: OG-OSS
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

#----------------------------------------------------------------------------
# uses mvn release to produce a new version, only for release tag
  trigger_release:
    jobs:
      - trigger_release:
          context: OG-OSS
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^release.*/
